# multiservernew.py
import socket
import threading

# Define an IPv4 & TCP socket                                                                                                                                                                                
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

serverRunning = True

ip = str(socket.gethostbyname(socket.gethostname()))

port = 1234

# Define an IPv4 & TCP socket                                                                                                                                                                                
clients = {}

s.bind((ip,port))
s.listen()

print('Server is ready...')
print('Ip adressen till servern är::%s'%ip)

def handleClient(client,uname):
    clientConnected = True
    keys = clients.keys()
    help = 'There are four commands you can use with this server\n1:: **chatlist => gives you the list of the people currently online\n2:: **quit => To end your session\n3:: **broadcast => To broadcast yo\
ur message to each and every person currently present online\n4:: Add the name of the person at the end of your message preceded by ** to send the message to that  particular person'

 while clientConnected:
        try:
            # msg = client.recv(1024).decode('ascii')                                                                                                                                                        
            # msg = client.recv(1024).decode('utf8')                                                                                                                                                         
            msg = client.recv(1024).decode()
            response = 'Total number of people connected to the server\n'
            found = False
            if('**chatlist' in msg):
                clientNo = 0
                for(name) in keys:
                    clientNo += 1
                    response = response + str(clientNo) +'::' + name+'\n'
                client.send(response.encode())
            elif('**help' in msg):
                client.send(help.encode())
            elif('**broadcast' in msg):
                msg = msg.replace('**broadcast','')
                for(k,v) in clients.items():
                    v.send(msg.encode())
            elif('**quit' in msg):
                response = 'Server process is terminating now...'
                client.send(response.encode())
                clients.pop(uname)
                print(uname + ' har frånkopplats[loggats ut] från servern!')
                clientConnected = False
            else:
                for(name) in keys:
                    if('**'+name) in msg:
                        msg = msg.replace('**'+name, '')
                        clients.get(name).send(msg.encode())
                        found = True
                if(not found):
                    client.send('You are trying to send a message to someone not logged into the server.'.encode())
        except:
            clients.pop(uname)
            print(uname + ' har frånkopplat[loggat ut] från servern!')
            clientConnected = False

while serverRunning:
    client, address = s.accept()
    uname = client.recv(1024).decode()
    print('%s Connected to the server'%str(uname))
    client.send("Welcome!. Write **help to read about all the available commands you can use".encode())

    if(client not in clients):
        clients[uname] = client
        threading.Thread(target = handleClient, args = (client, uname, )).start()

----------------------------------------------------

# multiclientnew.py

import socket
import threading
import sys

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # IPv4 & TCP                                                                                                                                           
port = 1234

uname = input("Enter the user name:: ")

ip = input('Enter the IP address to the server:: ')

s.connect((ip,port))
s.send(uname.encode())

clientRunning = True

def receiveMsg(sock):
    serverDown = False
    while clientRunning and (not serverDown):
        try:
            msg = sock.recv(1024).decode()
            print(msg)
        except:
            print('Server is Down. You are now Disconnected. Press enter to exit...')
            serverDown = True

threading.Thread(target = receiveMsg, args = (s,)).start()
while clientRunning:
    tempMsg = input()
    msg = uname + '>>' + tempMsg
    if '**quit' in msg:
        clientRunning = False
        s.send('**quit'.encode())
    else:
        s.send(msg.encode())

---------------------------------------------------------

#  multiconnection-server.py

import selectors
import socket
sel = selectors.DefaultSelector()
#  ...                                                                                                                                                                                                        
lsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
lsock.bind((host, port))
lsock.listen()
print('listening on', (host, port))
lsock.setblocking(False)
sel.register(lsock, selectors.EVENT_READ, data=None)

while True:
    events = sel.select(timeout=None)
    for key, mask in events:
        if key.data is None:
            accept_wrapper(key.fileobj)
        else:
            service_connection(key, mask)

def accept_wrapper(sock):
    conn, addr = sock.accept()  # Should be ready to read                                                                                                                                                    
    print('accepted connection from', addr)
    conn.setblocking(False)
    data = types.SimpleNamespace(addr=addr, inb=b'', outb=b'')
    events = selectors.EVENT_READ | selectors.EVENT_WRITE
    sel.register(conn, events, data=data)

events = selectors.EVENT_READ | selectors.EVENT_WRITE

def service_connection(key, mask):
    sock = key.fileobj
    data = key.data
    if mask & selectors.EVENT_READ:
        recv_data = sock.recv(1024)  # Should be ready to read                                                                                                                                               
        if recv_data:
            data.outb += recv_data
        else:
            print('closing connection to', data.addr)
            sel.unregister(sock)
            sock.close()
    if mask & selectors.EVENT_WRITE:
        if data.outb:
            print('echoing', repr(data.outb), 'to', data.addr)
            sent = sock.send(data.outb)  # Should be ready to write                                                                                                                                          
            data.outb = data.outb[sent:]

-------------------------------------------------------------------------

#  multiconnection-client.py

messages = [b'Message 1 from client.', b'Message 2 from client.']


def start_connections(host, port, num_conns):
    server_addr = (host, port)
    for i in range(0, num_conns):
        connid = i + 1
        print('starting connection', connid, 'to', server_addr)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.setblocking(False)
        sock.connect_ex(server_addr)
        events = selectors.EVENT_READ | selectors.EVENT_WRITE
        data = types.SimpleNamespace(connid=connid,
                                     msg_total=sum(len(m) for m in messages),
                                     recv_total=0,
                                     messages=list(messages),
                                     outb=b'')
	sel.register(sock, events, data=data)

def service_connection(key, mask):
    sock = key.fileobj
    data = key.data

    if mask & selectors.EVENT_READ:
        recv_data = sock.recv(1024)  # Should be ready to read                                                                                                                                               
        if recv_data:
            print('received', repr(recv_data), 'from connection', data.connid)
            data.recv_total += len(recv_data)
            if not recv_data or data.recv_total == data.msg_total:
                print('closing connection', data.connid)
                sel.unregister(sock)
                sock.close()

    if mask & selectors.EVENT_WRITE:
        if not data.outb and data.messages:
            data.outb = data.messages.pop(0)
            if data.outb:
                print('sending', repr(data.outb), 'to connection', data.connid)
                sent = sock.send(data.outb)  # Should be ready to write                                                                                                                                      
                data.outb = data.outb[sent:]

--------------------------------------------------------------------------------------

# tcpserver.py

import socket

host = '127.0.0.1'             # Standard loopback interface adress(localhost)
port =  50000                  # Port att lyssna på(använd gärna en port > 1023)

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((host, port))
    s.listen()
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            data = conn.recv(1024)
            if not data:
                break
            conn.sendall(data)

-----------------------------------------------------------------

# tcpclient.py

import socket

host = '127.0.0.1'               # Servern hostnamn or IP adress
port =  50000                    # Port som används av servern

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
 
    s.connect((host,port))       # Accepterar en tuple
    s.sendall(b'Hello, world')   # Omvandlar sträng till byte code
    data = s.recv(1024)          # Tar emot data från servern
    
print('Received', repr(data))

------------------------------------------------------------------

# DBconnector - connect.py

__author__ = 'JeffKing'

import mysql.connector
from mysql.connector import Error
from mysql.connector import errorcode

try:
    connect = mysql.connector.connect(
	user = 'root',
        password = 'eget_mysql_lösenord',
        host = 'localhost',
	database = 'databas_namn')
    print(2*'\n', "Det Funkar!! Du har lyckats att koppla Dig till Din databas!", 2*'\n')

except mysql.connector.Error as e:

    if e.errno == errorcode.ER_ACCESS_DENIED_ERROR:
	print(2*'\n', "Kopplingen fungerar inte!", 2*'\n')

    elif e.errno == errorcode.ER_BAD_DB_ERROR:
        print(2*'\n',"Databas namn hittades inte!!",2*'\n')

    else:
        print(e)

---------------------------------------------------------------

 # SQl_insert_query -  insert.py
 
import mysql.connector
from mysql.connector import Error
from mysql.connector import errorcode
try:
    connection = mysql.connector.connect(host = 'localhost',
                                         database = 'eget_databas_namn',
                                         user     = 'root',
                                         password = 'lösenord_till_mysql')

    sql_insert_query = ''' INSERT INTO person                                                                                                                                                               
                              (name) VALUES ('Kalle Karlsson') '''

    cursor = connection.cursor()
    result  = cursor.execute(sql_insert_query)
    connection.commit()

    print ("Namn lagrats i person tabellen")

except mysql.connector.Error as error :
    connection.rollback()           # rollback if any exception occured                                                                                                                                                
    print("Lagring misslyckades {}".format(error))
finally:
                                    # closing database connection.                                                                                                                                                                       
    if(connection.is_connected()):
        cursor.close()
        connection.close()
        print("MySQL koppling nerkopplad")
